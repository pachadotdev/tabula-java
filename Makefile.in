CXX ?= g++
# CXXFLAGS will be assembled by configure from template substitutions
CXXFLAGS ?= @stdflag@ @optflags@ -Iinclude -Wall -Wextra -pthread
AR ?= ar

# Set to 1 to exclude JSON/CSV writers from the build: `make NOWRITERS=1`
NOWRITERS ?= 0


SRC_DIR := src
OBJ_DIR := build/obj
LIB_DIR := build/lib
BIN_DIR := build/bin

LIBNAME := libtabula.a

# Include vars generated by configure if present
ifneq (,$(wildcard src/Makevars))
include src/Makevars
else
PKG_CPPFLAGS ?= -Iinclude
PKG_LIBS ?=
PKG_OPTFLAGS ?=
endif

# If Poppler libs/flags were found, expose a macro so sources compile the
# Poppler-enabled code paths guarded by #ifdef HAVE_POPPLER
ifneq ($(strip $(PKG_LIBS)),)
PKG_CPPFLAGS += -DHAVE_POPPLER
endif

# Sources
WRITER_FILES := $(SRC_DIR)/writers/JSONWriter.cpp $(SRC_DIR)/writers/CSVWriter.cpp $(SRC_DIR)/writers/WriterFactory.cpp

LIB_SRCS := $(shell find $(SRC_DIR) -name '*.cpp' -not -path '$(SRC_DIR)/tests/*' -not -name 'poppler_example.cpp' -not -name 'main.cpp' 2>/dev/null || true)

# If NOWRITERS is enabled, filter out writer implementation files and add a
# consumer-side define so code can conditionally skip writer logic.
ifeq ($(NOWRITERS),1)
LIB_SRCS := $(filter-out $(WRITER_FILES),$(LIB_SRCS))
CXXFLAGS += -DNO_WRITERS
endif
LIB_OBJS := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(LIB_SRCS))

TABULA_SRC := $(SRC_DIR)/CommandLineApp.cpp
TABULA_BIN := $(BIN_DIR)/tabula

TEST_SRCS := $(shell find $(SRC_DIR)/tests -name '*.cpp' 2>/dev/null || true)
TEST_OBJS := $(patsubst $(SRC_DIR)/tests/%.cpp,$(OBJ_DIR)/tests/%.o,$(TEST_SRCS))
COMBINED_SRC := $(OBJ_DIR)/combined_tests.cpp
COMBINED_OBJ := $(OBJ_DIR)/combined_tests.o
TEST_BIN := $(BIN_DIR)/tabula-test

.PHONY: all clean test

# Default target: build binaries but don't execute tests automatically
all: $(TABULA_BIN) $(TEST_BIN)
	@echo "Build complete: $(TABULA_BIN) and $(TEST_BIN)"

# Run unit tests (separate target so `make` doesn't run them automatically)
test: $(TEST_BIN)
	@echo "Running unit tests..."
	@if [ -x "$(TEST_BIN)" ]; then \
		"$(TEST_BIN)"; \
	else \
		echo "Test binary not found or not executable: $(TEST_BIN)"; exit 2; \
	fi

# Build rules
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) $(PKG_CPPFLAGS) -Iinclude -c $< -o $@

$(OBJ_DIR)/tests/%.o: $(SRC_DIR)/tests/%.cpp
	@mkdir -p $(dir $@)
	@base=$$(echo $* | sed 's/^test_//'); \
	$(CXX) $(CXXFLAGS) $(PKG_CPPFLAGS) -Dmain=tabula_test_$${base} -Iinclude -c $< -o $@

$(LIB_DIR)/$(LIBNAME): $(LIB_OBJS)
	@mkdir -p $(LIB_DIR)
	$(AR) rcs $@ $^

$(BIN_DIR)/tabula: $(TABULA_SRC) $(LIB_DIR)/$(LIBNAME)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(CXXFLAGS) $(PKG_CPPFLAGS) -Iinclude $< $(LIB_DIR)/$(LIBNAME) $(PKG_LIBS) -o $@

# Generate a combined tests.cpp that calls each test main
$(COMBINED_SRC): $(TEST_OBJS)
	@mkdir -p $(dir $@)
	@printf '%s\n' '// Auto-generated combined test harness' '#include <iostream>' > $(COMBINED_SRC)
	@for s in $(notdir $(TEST_SRCS)); do \
		name=$${s%.cpp}; base=$${name#test_}; \
		printf 'extern int tabula_test_%s();\n' "$${base}" >> $(COMBINED_SRC); \
	done
	@printf '%s\n' 'int main() {' '  int rc = 0;' >> $(COMBINED_SRC)
	@for s in $(notdir $(TEST_SRCS)); do \
		name=$${s%.cpp}; base=$${name#test_}; \
		printf '  std::cout << "Running tabula_test_%s\\n";\n' "$${base}" >> $(COMBINED_SRC); \
		printf '  rc = tabula_test_%s();\n' "$${base}" >> $(COMBINED_SRC); \
		printf '  if (rc != 0) { std::cerr << "tabula_test_%s failed with code " << rc << "\\n"; return rc; }\n' "$${base}" >> $(COMBINED_SRC); \
	done
	@printf '%s\n' '  std::cout << "All tests passed\\n";' '  return 0;' '}' >> $(COMBINED_SRC)

$(COMBINED_OBJ): $(COMBINED_SRC)
	$(CXX) $(CXXFLAGS) $(PKG_CPPFLAGS) -Iinclude -c $< -o $@

$(TEST_BIN): $(TEST_OBJS) $(COMBINED_OBJ) $(LIB_DIR)/$(LIBNAME)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(CXXFLAGS) $(PKG_CPPFLAGS) -Iinclude $(COMBINED_OBJ) $(TEST_OBJS) $(LIB_DIR)/$(LIBNAME) $(PKG_LIBS) -o $@

clean:
	rm -rf build src/Makevars

clang_format=`which clang-format`

format: $(shell find . -name '*.h') $(shell find . -name '*.hpp') $(shell find . -name '*.cpp')
	@${clang_format} -i $?
